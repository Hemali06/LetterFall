// Generated by CoffeeScript 1.9.1
(function() {
  var LetterFall;

  Candy.LetterFall = LetterFall = (function() {
    function LetterFall(game) {
      this.fontStyle = {
        font: '32px Arial Bold Italic',
        fill: '#FFFFFF'
      };
      this.fontStyle1 = {
        font: '32px Arial Bold Italic',
        fill: '#003791'
      };
      this.leftKey = null;
      this.rightKey = null;
      return;
    }

    LetterFall.prototype.create = function() {
      var word_text;
      this.add.sprite(0, 0, 'background');
      this.add.sprite(240, -5, 'elements', 'displayWord.png');
      this.add.sprite(-20, -17, 'elements', 'displayScore.png');
      this.add.button(650, 13, 'icons', this.managePause, this, 'pause.png', 'pause.png', 'pause.png', 'pause.png');
      this.add.button(720, 12, 'icons', this.backtomain, this, 'backtomain.png', 'backtomain.png', 'backtomain.png', 'backtomain.png');
      this.totalLetters = 7;
      this.letters = [];
      this.velocityValues = [150, 220, 250, 300, 230, 190];
      Candy._scoreText = null;
      Candy._score = 0;
      this.rightLetterIndex = 0;
      this.wordLength = Candy.words[Candy.wordIndex].length;
      this.wordIndex = 0;
      this.currentText = null;
      this.fontsize = 0;
      this.bomb = 0;
      this.player = null;
      this.facing = 'right';
      this.player = this.add.sprite(0, 540, 'player');
      this.player.animations.add('left', [4, 5, 6, 7], 5, true);
      this.player.animations.add('right', [0, 1, 2, 3], 5, true);
      word_text = this.add.text(this.world.centerX, 80, this.score);
      this.leftKey = this.input.keyboard.addKey(Phaser.Keyboard.LEFT);
      this.rightKey = this.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
      this.game.physics.startSystem(Phaser.Physics.ARCADE);
      this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
      this.game.physics.setBoundsToWorld();
      Candy._scoreText = this.add.text(30, 17, "0", this.fontStyle);
      this.resetLetters();
    };

    LetterFall.prototype.resetLetters = function() {
      var i, letter, lettervelocity, x, y;
      i = 0;
      while (i < this.totalLetters) {
        x = this.getX(i);
        y = 15 + Math.random() * 30;
        letter = this.randomLetter(Candy.wordIndex).toUpperCase();
        this.letters[i] = this.add.sprite(x, y, 'alphabets', letter + '.png');
        this.physics.enable(this.letters[i], Phaser.Physics.ARCADE);
        lettervelocity = this.velocityValues[this.randomNumber(this.velocityValues.length)];
        this.letters[i].body.velocity.y = lettervelocity;
        this.letters[i].checkWorldBounds = true;
        this.letters[i].keyIndex = i;
        this.letters[i].isPointGiven = false;
        this.letters[i].events.onOutOfBounds.add(this.reset, this);
        i++;
      }
    };

    LetterFall.prototype.reset = function(resetLetter) {
      var letter, lettervelocity, x, y;
      x = resetLetter.x;
      y = 15 + Math.random() * 30;
      letter = this.randomLetter(Candy.wordIndex).toUpperCase();
      if (this.bomb === 7) {
        this.letters[resetLetter.keyIndex] = this.add.sprite(x, y, 'bomb');
        this.bomb = 0;
        this.letters[resetLetter.keyIndex].key = '@';
      } else {
        this.letters[resetLetter.keyIndex] = this.add.sprite(x, y, 'alphabets', letter + '.png');
        this.bomb++;
      }
      this.physics.enable(this.letters[resetLetter.keyIndex], Phaser.Physics.ARCADE);
      lettervelocity = this.velocityValues[this.randomNumber(this.velocityValues.length)];
      this.letters[resetLetter.keyIndex].body.velocity.y = lettervelocity;
      this.letters[resetLetter.keyIndex].checkWorldBounds = true;
      this.letters[resetLetter.keyIndex].keyIndex = resetLetter.keyIndex;
      this.letters[resetLetter.keyIndex].isPointGiven = false;
      this.letters[resetLetter.keyIndex].alpha = 1;
      this.letters[resetLetter.keyIndex].events.onOutOfBounds.add(this.reset, this);
    };

    LetterFall.prototype.randomNumber = function(max) {
      var numExpanded, numFloored, randomNum;
      randomNum = Math.random();
      numExpanded = randomNum * max;
      numFloored = Math.floor(numExpanded);
      return numFloored;
    };

    LetterFall.prototype.getX = function(index) {
      var addition, base, final_return, i;
      addition = 1 + Math.random() * 100;
      base = 0;
      i = 0;
      while (i < index) {
        base = base + 110;
        i++;
      }
      final_return = base + addition;
      return final_return;
    };

    LetterFall.prototype.randomLetter = function(wordIndex) {
      var randomItem, randomPosition;
      randomItem = Candy.words[Candy.wordIndex];
      randomPosition = Math.floor(Math.random() * randomItem.length);
      randomItem = randomItem.substr(randomPosition, 1);
      return randomItem;
    };

    LetterFall.prototype.backtomain = function() {
      this.state.start('MainMenu');
    };

    LetterFall.prototype.managePause = function() {
      var pausedText;
      this.game.paused = true;
      pausedText = this.add.text(this.world.centerX, 250, "Game paused.\nTap anywhere to continue.", this.fontStyle1);
      pausedText.anchor.setTo(0.5, 0.5);
      this.input.onDown.add((function() {
        pausedText.destroy();
        this.game.paused = false;
      }), this);
    };

    LetterFall.prototype.setPoints = function(player, letter) {
      var currentText, position;
      if (letter.key === '@') {
        this.state.start('BombPicked');
      } else {
        if (letter.isPointGiven === false) {
          if (letter.frameName.substr(0, 1).toLowerCase() === Candy.words[Candy.wordIndex][this.rightLetterIndex]) {
            position = this.wordLength / 2 * 16;
            currentText = this.add.text(this.world.centerX + this.fontsize - position, 15, letter.frameName.substr(0, 1).toLowerCase(), this.fontStyle);
            this.fontsize += currentText.width;
            Candy._score++;
            this.rightLetterIndex++;
            Candy._scoreText.setText(Candy._score);
            this.wordIndex++;
            if (this.wordLength === this.wordIndex) {
              this.state.start('FinalScreen');
            }
          } else {
            Candy._score--;
            Candy._scoreText.setText(Candy._score);
          }
          letter.isPointGiven = true;
          letter.alpha = 0;
        }
      }
    };

    LetterFall.prototype.update = function() {
      game.physics.arcade.overlap(this.player, this.letters, this.setPoints, null, this);
      this.player.body.velocity.x = 0;
      if (this.leftKey.isDown) {
        if (this.player.body.x > 0) {
          this.player.body.velocity.x = -200;
        }
        if (this.facing !== 'left') {
          this.player.animations.play('left');
          this.facing = 'left';
        }
      } else if (this.rightKey.isDown) {
        if (this.player.body.x <= Candy.GAME_WIDTH - this.player.width) {
          this.player.body.velocity.x = 200;
        }
        if (this.facing !== 'right') {
          this.player.animations.play('right');
          this.facing = 'right';
        }
      } else {
        if (this.facing !== 'idle') {
          if (this.facing === 'left') {
            this.player.frame = 4;
          } else {
            this.player.frame = 0;
          }
          this.facing = 'idle';
        }
      }
    };

    LetterFall.prototype.mainMenu = function() {
      this.state.start('MainMenu');
    };

    return LetterFall;

  })();

}).call(this);
